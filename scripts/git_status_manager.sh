#!/bin/bash
# Git-based Project Status Manager for LinOSS Rust
# Provides multiple approaches to track file status using Git

set -e

PROJECT_ROOT="/home/rustuser/projects/active/LinossRust"
cd "$PROJECT_ROOT"

echo "üéØ LinOSS Rust Git-Based Status Management"
echo "=========================================="

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo "üìä Method 1: Git Attributes Status Tracking"
echo "==========================================="
echo "Using .gitattributes file to mark file status:"
echo ""
if [ -f .gitattributes ]; then
    echo -e "${GREEN}‚úÖ .gitattributes file exists${NC}"
    echo "Current status tags:"
    grep "status=" .gitattributes | head -10
    echo ""
    echo "To check file status: git check-attr status <filename>"
    echo "Example: git check-attr status src/main.rs"
else
    echo -e "${RED}‚ùå .gitattributes file not found${NC}"
fi

echo ""
echo "üìã Method 2: Git Notes for Status Tracking"  
echo "=========================================="
echo "Using git notes to add status information:"
echo ""
echo "Commands to use:"
echo "  git notes add -m 'status:working' <commit/file>"
echo "  git notes add -m 'status:broken' <commit/file>"
echo "  git notes add -m 'status:needs-test' <commit/file>"
echo "  git notes show <commit>"

echo ""
echo "üè∑Ô∏è Method 3: Git Tags for Releases"
echo "=================================="
echo "Tag stable versions:"
echo "  git tag -a working-examples-v1.0 -m 'First stable example set'"
echo "  git tag -a main-app-v1.0 -m 'Lissajous visualizer with damping'"

echo ""
echo "üìÇ Method 4: Git Branch Strategy"
echo "================================"
echo "Current branches:"
git branch -a 2>/dev/null || echo "No git repository or no branches"
echo ""
echo "Suggested branch strategy:"
echo "  - main: Stable, working code only"
echo "  - dev: Development work"
echo "  - experimental: Broken/testing examples"
echo "  - archive: Old/deprecated code"

echo ""
echo "üìù Method 5: Status in Commit Messages"
echo "======================================"
echo "Use conventional commits with status:"
echo "  git commit -m 'feat(examples): add working dlinoss visualizer [WORKING]'"
echo "  git commit -m 'fix(examples): repair broken oscillator demo [FIXED]'"
echo "  git commit -m 'archive(examples): move broken examples [BROKEN]'"

echo ""
echo "üîç Method 6: Git Log Analysis"
echo "============================="
echo "Recent file modifications:"
git log --oneline --name-only --since="1 week ago" | head -20

echo ""
echo "üìä Current Project Status Summary"
echo "================================="
echo ""
echo -e "${GREEN}‚úÖ Working Files:${NC}"
echo "  - src/main.rs (Enhanced Lissajous visualizer)"
echo "  - examples/dlinoss_response_visualizer.rs"
echo "  - examples/burn_demo.rs"
echo "  - examples/egui_native/ (sub-project)"
echo "  - examples/dlinoss_diagram/ (sub-project)"
echo ""
echo -e "${YELLOW}üóÉÔ∏è Archived Files:${NC}"
echo "  - examples/OLD/ (11 broken examples moved here)"
echo ""
echo -e "${RED}‚ùå Removed Files:${NC}"
echo "  - Multiple broken examples with API issues"
echo "  - Python scripts (out of scope)"
echo ""

echo "üéØ Recommended Workflow"
echo "======================="
echo ""
echo "1. **Daily Status Check**:"
echo "   ./scripts/check_project_status.sh"
echo ""
echo "2. **Before Commits**:"
echo "   git check-attr status <file> # Check current status"
echo "   ./scripts/check_project_status.sh # Verify compilation"
echo ""
echo "3. **Mark File Status**:"
echo "   echo 'path/to/file status=working' >> .gitattributes"
echo "   echo 'path/to/file status=broken' >> .gitattributes"
echo "   echo 'path/to/file status=needs-test' >> .gitattributes"
echo ""
echo "4. **Archive Broken Code**:"
echo "   mv examples/broken_example.rs examples/OLD/"
echo "   git add examples/OLD/broken_example.rs"
echo "   git commit -m 'archive(examples): move broken example [BROKEN]'"
echo ""
echo "5. **Update Documentation**:"
echo "   # Edit PROJECT_STATUS.md and examples/README.md"
echo "   git add PROJECT_STATUS.md examples/README.md"
echo "   git commit -m 'docs: update project status [DOCS]'"

echo ""
echo "üîß Git Commands for Status Management"
echo "====================================="
echo ""
echo "# Check file status using git attributes"
echo "git check-attr status src/main.rs"
echo ""
echo "# Find all files with specific status"
echo "git ls-files | xargs git check-attr status | grep 'working'"
echo ""
echo "# Show recent changes to examples"
echo "git log --oneline --since='1 week ago' -- examples/"
echo ""
echo "# List untracked files (potentially new examples)"
echo "git ls-files --others --exclude-standard examples/"
echo ""
echo "# Clean up untracked files"
echo "git clean -fd examples/ # (use with caution!)"

echo ""
echo "‚úÖ Setup Complete!"
echo "=================="
echo ""
echo "Your project now has comprehensive status tracking:"
echo "  ‚úÖ Automated status checker script"
echo "  ‚úÖ Git attributes for file status"
echo "  ‚úÖ Updated documentation"
echo "  ‚úÖ Clean examples directory"
echo "  ‚úÖ Archive for broken code"
echo ""
echo "Next: Run './scripts/check_project_status.sh' regularly to maintain status."
