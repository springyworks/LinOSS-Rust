[package]
name = "linoss_rust"
version = "0.2.0"
edition = "2021"
default-run = "linoss_rust"

[[bin]]
name = "linoss_rust"
path = "src/main.rs"

[[bin]]
name = "ratatuitest"
path = "src/bin/ratatuitest.rs"

[[bin]]
name = "animatedRataui"
path = "src/bin/animatedRataui.rs"

[[example]]
name = "train_linoss"
path = "examples/train_linoss.rs"

[dependencies]
burn = { version = "0.17.1", features = [
    "ndarray",
    "autodiff",
    "wgpu",
    "std",
    "dataset",
] }
nalgebra = { version = "0.33.2", features = ["rand"] }
rand = { version = "0.8.5", features = ["std_rng"] }
ndarray = "0.16"
ratatui = { version = "0.29.0", features = ["crossterm"] }
crossterm = "0.29.0"
log = "0.4"
env_logger = "0.11"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
tokio = { version = "1", features = ["full"] }
plotters = "0.3.6"
plotters-ratatui-backend = "0.3.0" # Corrected to plotters-ratatui-backend
num-traits = "0.2" # Added num-traits
ndarray-npy = "0.9.1"
anyhow = "1.0"
libc = "0.2" # For low-level system calls and O_NONBLOCK
ctrlc = "3.4" # For signal handling
tokio-tungstenite = "0.21" # WebSocket support for burn profiler bridge
futures-util = "0.3" # For WebSocket stream handling

# egui for native GUI applications
eframe = "0.31.1"
egui = "0.31.1"
egui_extras = { version = "0.31.1", features = ["image", "svg"] }

[dev-dependencies]
tempfile = "3.0"

#dess = { path = "/home/rustuser/rustdev/de-system-solver_kos/dess", version = "0.1.0" }
#ode_solvers = "0.6"

[features]
default = ["ndarray_backend", "wgpu_backend"]
ndarray_backend = ["burn/ndarray", "burn/autodiff"]
wgpu_backend = ["burn/wgpu", "burn/autodiff"]

# Custom build profiles for development optimization
[profile.dev]
# Debug builds (default) - fast compilation, large binaries, debug info
opt-level = 0                # No optimization
debug = true                 # Include debug info
split-debuginfo = "unpacked" # Faster linking on Linux

[profile.dev-opt]
# Development with some optimization - balanced speed/performance
inherits = "dev"
opt-level = 1      # Basic optimization
debug = true
incremental = true # Enable incremental compilation

[profile.release]
# Full release optimization - slow compilation, small fast binaries
opt-level = 3     # Full optimization
debug = false     # No debug info
lto = true        # Link-time optimization (slow but effective)
codegen-units = 1 # Better optimization, slower compilation
panic = "abort"   # Smaller binaries

[profile.fast-release]
# Quick release - faster compilation with good optimization
inherits = "release"
opt-level = 2        # Good optimization, faster than level 3
lto = "thin"         # Faster LTO
codegen-units = 4    # Parallel compilation
debug = false
