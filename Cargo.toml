[workspace]
members = [
    ".",
    "examples/egui_native"
]

[package]
name = "linoss_rust"
version = "0.2.0"
edition = "2024"
default-run = "linoss_rust"

# Enable unstable features for CubeCL compatibility
[lints.rust]
build_hasher_default_const_new = "allow"

[[bin]]
name = "linoss_rust"
path = "src/main.rs"

[[bin]]
name = "animatedRataui"
path = "src/bin/animatedRataui.rs"

[[example]]
name = "train_linoss"
path = "examples/train_linoss.rs"

[dependencies]
# Burn ML framework with conditional features - ENABLE WGPU FOR TRUE GPU PIPELINE
burn = { path = "/home/rustuser/projects/from_github/burnko/crates/burn", features = [
    "ndarray",
    "wgpu",     # âš¡ WGPU BACKEND - DO NOT REMOVE!
    "autodiff",
    "std",
    "dataset"
], default-features = false }
nalgebra = { version = "0.33.2" }
rand = { version = "0.9", features = ["std_rng"] }
ndarray = "0.16"
log = "0.4"
env_logger = "0.11"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
num-traits = "0.2"
tokio = { version = "1", features = ["sync", "time", "macros", "rt"] }
plotters = "0.3.6"

# Optional dependencies
ratatui = { version = "0.29", optional = true }
crossterm = { version = "0.28", optional = true }
anyhow = { version = "1.0", optional = true }
ctrlc = { version = "3.4", optional = true }
ndarray-npy = { version = "0.8", optional = true }
tokio-tungstenite = { version = "0.24", optional = true }
futures-util = { version = "0.3", optional = true }
libc = { version = "0.2", optional = true }

# egui for native GUI applications (always available)
eframe = "0.31.1"
egui = "0.31.1"
egui_extras = { version = "0.31.1", features = ["image", "svg"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "0.3", features = ["wasm_js"] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { version = "1", features = ["full"] }

[dev-dependencies]
tempfile = "3.0"

[features]
default = ["ndarray_backend", "visualization"]
visualization = ["dep:ratatui", "dep:crossterm", "dep:anyhow", "dep:ctrlc"]
ndarray_backend = []
wgpu_backend = []
websocket = ["dep:tokio-tungstenite", "dep:futures-util"]
npy_files = ["dep:ndarray-npy"]
libc = ["dep:libc"]
wasm = ["ndarray_backend"]
checkpoint = []
checkpoint_full = ["dep:anyhow"]

# Custom build profiles for development optimization
[profile.dev]
# Debug builds (default) - fast compilation, large binaries, debug info
opt-level = 0                # No optimization
debug = true                 # Include debug info
split-debuginfo = "unpacked" # Faster linking on Linux

[profile.dev-opt]
# Development with some optimization - balanced speed/performance
inherits = "dev"
opt-level = 1      # Basic optimization
debug = true
incremental = true # Enable incremental compilation

[profile.release]
# Full release optimization - slow compilation, small fast binaries
opt-level = 3     # Full optimization
debug = false     # No debug info
lto = true        # Link-time optimization (slow but effective)
codegen-units = 1 # Better optimization, slower compilation
panic = "abort"   # Smaller binaries

[profile.fast-release]
# Quick release - faster compilation with good optimization
inherits = "release"
opt-level = 2        # Good optimization, faster than level 3
lto = "thin"         # Faster LTO
codegen-units = 4    # Parallel compilation
debug = false

# Patch CubeCL to use a local version with unstable feature enabled
[patch."https://github.com/tracel-ai/cubecl"]
cubecl = { path = "/home/rustuser/projects/from_github/cubecl/crates/cubecl" }
cubecl-runtime = { path = "/home/rustuser/projects/from_github/cubecl/crates/cubecl-runtime" }
cubecl-common = { path = "/home/rustuser/projects/from_github/cubecl/crates/cubecl-common" }
cubecl-wgpu = { path = "/home/rustuser/projects/from_github/cubecl/crates/cubecl-wgpu" }
cubecl-matmul = { path = "/home/rustuser/projects/from_github/cubecl/crates/cubecl-matmul" }
